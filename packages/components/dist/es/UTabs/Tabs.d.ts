/// <reference types="lodash" />
import { TabsProps } from 'naive-ui';
import './index.css';
export declare type UTabsPropsType = TabsProps;
/**
 * custom class:
 * no-border
 * */
declare const UTabs: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
    readonly value: import("vue").PropType<string | number>;
    readonly defaultValue: import("vue").PropType<string | number>;
    readonly trigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly default: "click";
    };
    readonly type: {
        readonly type: import("vue").PropType<import("naive-ui/es/tabs/src/interface").TabsType>;
        readonly default: "bar";
    };
    readonly closable: BooleanConstructor;
    readonly justifyContent: import("vue").PropType<"center" | "space-around" | "space-between" | "space-evenly" | "end" | "start">;
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large">;
        readonly default: "medium";
    };
    readonly tabStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly barWidth: NumberConstructor;
    readonly paneClass: StringConstructor;
    readonly paneStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly addable: import("vue").PropType<import("naive-ui/es/tabs/src/interface").Addable>;
    readonly tabsPadding: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly animated: BooleanConstructor;
    readonly onBeforeLeave: import("vue").PropType<import("naive-ui/es/tabs/src/interface").OnBeforeLeave>;
    readonly onAdd: import("vue").PropType<() => void>;
    readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnUpdateValue>>;
    readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnUpdateValue>>;
    readonly onClose: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnClose>>;
    readonly labelSize: import("vue").PropType<"small" | "medium" | "large">;
    readonly activeName: import("vue").PropType<string | number>;
    readonly onActiveNameChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: never) => void>>;
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>>;
}, {
    syncBarPosition: () => void;
    mergedClsPrefix: import("vue").ComputedRef<string>;
    mergedValue: import("vue").ComputedRef<string | number | null>;
    renderedNames: Set<string | number>;
    tabsRailElRef: import("vue").Ref<HTMLElement | null>;
    tabsPaneWrapperRef: import("vue").Ref<HTMLElement | null>;
    tabsElRef: import("vue").Ref<HTMLElement | null>;
    barElRef: import("vue").Ref<HTMLElement | null>;
    addTabInstRef: import("vue").Ref<import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null>;
    xScrollInstRef: import("vue").Ref<(import("vueuc").VXScrollInst & {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {};
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[] | undefined;
            created?: (() => void) | (() => void)[] | undefined;
            beforeMount?: (() => void) | (() => void)[] | undefined;
            mounted?: (() => void) | (() => void)[] | undefined;
            beforeUpdate?: (() => void) | (() => void)[] | undefined;
            updated?: (() => void) | (() => void)[] | undefined;
            activated?: (() => void) | (() => void)[] | undefined;
            deactivated?: (() => void) | (() => void)[] | undefined;
            beforeDestroy?: (() => void) | (() => void)[] | undefined;
            beforeUnmount?: (() => void) | (() => void)[] | undefined;
            destroyed?: (() => void) | (() => void)[] | undefined;
            unmounted?: (() => void) | (() => void)[] | undefined;
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[] | undefined;
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[] | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & import("vue").ShallowUnwrapRef<{}> & import("vue").ComponentCustomProperties) | null>;
    scrollWrapperElRef: import("vue").Ref<HTMLElement | null>;
    addTabFixed: import("vue").Ref<boolean>;
    tabWrapperStyle: import("vue").ComputedRef<{
        display: string;
        justifyContent: "center" | "space-around" | "space-between" | "space-evenly" | "end" | "start";
    } | undefined>;
    handleNavResize: import("lodash").DebouncedFunc<(entry: ResizeObserverEntry) => void>;
    mergedSize: import("vue").ComputedRef<"small" | "medium" | "large">;
    handleScroll: import("lodash").DebouncedFunc<(e: Event) => void>;
    handleTabsResize: import("lodash").DebouncedFunc<(entry: ResizeObserverEntry) => void>;
    cssVars: import("vue").ComputedRef<{
        '--n-bezier': string;
        '--n-color-segment': string;
        '--n-bar-color': string;
        '--n-tab-font-size': string;
        '--n-tab-text-color': string;
        '--n-tab-text-color-active': string;
        '--n-tab-text-color-disabled': string;
        '--n-tab-text-color-hover': string;
        '--n-pane-text-color': string;
        '--n-tab-border-color': string;
        '--n-tab-border-radius': string;
        '--n-close-size': string;
        '--n-close-icon-size': string;
        '--n-close-color-hover': string;
        '--n-close-color-pressed': string;
        '--n-close-border-radius': string;
        '--n-close-icon-color': string;
        '--n-close-icon-color-hover': string;
        '--n-close-icon-color-pressed': string;
        '--n-tab-color': string;
        '--n-tab-font-weight': string;
        '--n-tab-font-weight-active': string;
        '--n-tab-padding': string;
        '--n-tab-gap': string;
        '--n-pane-padding': string;
        '--n-font-weight-strong': string;
        '--n-tab-color-segment': string;
    }> | undefined;
    themeClass: import("vue").Ref<string> | undefined;
    animationDirection: import("vue").Ref<"prev" | "next">;
    renderNameListRef: {
        value: (string | number)[];
    };
    onAnimationBeforeLeave: (el: HTMLElement) => void;
    onAnimationEnter: (el: HTMLElement) => void;
    onAnimationAfterEnter: () => void;
    onRender: (() => void) | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly value: import("vue").PropType<string | number>;
    readonly defaultValue: import("vue").PropType<string | number>;
    readonly trigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly default: "click";
    };
    readonly type: {
        readonly type: import("vue").PropType<import("naive-ui/es/tabs/src/interface").TabsType>;
        readonly default: "bar";
    };
    readonly closable: BooleanConstructor;
    readonly justifyContent: import("vue").PropType<"center" | "space-around" | "space-between" | "space-evenly" | "end" | "start">;
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large">;
        readonly default: "medium";
    };
    readonly tabStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly barWidth: NumberConstructor;
    readonly paneClass: StringConstructor;
    readonly paneStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly addable: import("vue").PropType<import("naive-ui/es/tabs/src/interface").Addable>;
    readonly tabsPadding: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly animated: BooleanConstructor;
    readonly onBeforeLeave: import("vue").PropType<import("naive-ui/es/tabs/src/interface").OnBeforeLeave>;
    readonly onAdd: import("vue").PropType<() => void>;
    readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnUpdateValue>>;
    readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnUpdateValue>>;
    readonly onClose: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/tabs/src/interface").OnClose>>;
    readonly labelSize: import("vue").PropType<"small" | "medium" | "large">;
    readonly activeName: import("vue").PropType<string | number>;
    readonly onActiveNameChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: never) => void>>;
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Tabs", {
        colorSegment: string;
        tabFontSizeCard: string;
        tabTextColorLine: string;
        tabTextColorActiveLine: string;
        tabTextColorHoverLine: string;
        tabTextColorDisabledLine: string;
        tabTextColorSegment: string;
        tabTextColorActiveSegment: string;
        tabTextColorHoverSegment: string;
        tabTextColorDisabledSegment: string;
        tabTextColorBar: string;
        tabTextColorActiveBar: string;
        tabTextColorHoverBar: string;
        tabTextColorDisabledBar: string;
        tabTextColorCard: string;
        tabTextColorHoverCard: string;
        tabTextColorActiveCard: string;
        tabTextColorDisabledCard: string;
        barColor: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        tabColor: string;
        tabColorSegment: string;
        tabBorderColor: string;
        tabFontWeightActive: string;
        tabFontWeight: string;
        tabBorderRadius: string;
        paneTextColor: string;
        fontWeightStrong: string;
        tabFontSizeSmall: string;
        tabFontSizeMedium: string;
        tabFontSizeLarge: string;
        tabGapSmallLine: string;
        tabGapMediumLine: string;
        tabGapLargeLine: string;
        tabPaddingSmallLine: string;
        tabPaddingMediumLine: string;
        tabPaddingLargeLine: string;
        tabGapSmallBar: string;
        tabGapMediumBar: string;
        tabGapLargeBar: string;
        tabPaddingSmallBar: string;
        tabPaddingMediumBar: string;
        tabPaddingLargeBar: string;
        tabGapSmallCard: string;
        tabGapMediumCard: string;
        tabGapLargeCard: string;
        tabPaddingSmallCard: string;
        tabPaddingMediumCard: string;
        tabPaddingLargeCard: string;
        tabPaddingSmallSegment: string;
        tabPaddingMediumSegment: string;
        tabPaddingLargeSegment: string;
        tabGapSmallSegment: string;
        tabGapMediumSegment: string;
        tabGapLargeSegment: string;
        panePaddingSmall: string;
        panePaddingMedium: string;
        panePaddingLarge: string;
        closeSize: string;
        closeIconSize: string;
    }, any>>>;
}>>, {
    readonly type: import("naive-ui/es/tabs/src/interface").TabsType;
    readonly size: "small" | "medium" | "large";
    readonly closable: boolean;
    readonly trigger: "click" | "hover";
    readonly animated: boolean;
    readonly tabsPadding: number;
}>, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export default UTabs;
