import type { CardProps } from 'naive-ui';
import './index.css';
export declare type UCardPropsType = CardProps;
declare const UCard: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
    title: StringConstructor;
    contentStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    headerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    headerExtraStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    footerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    embedded: BooleanConstructor;
    segmented: {
        readonly type: import("vue").PropType<boolean | import("naive-ui/es/card/src/Card").Segmented>;
        readonly default: false;
    };
    size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large" | "huge">;
        readonly default: "medium";
    };
    bordered: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    closable: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    hoverable: BooleanConstructor;
    role: StringConstructor;
    onClose: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<() => void>>;
    theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>;
    themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>>;
    builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>>;
}, {
    rtlEnabled: import("vue").Ref<import("naive-ui/es/config-provider/src/internal-interface").RtlItem | undefined> | undefined;
    mergedClsPrefix: import("vue").ComputedRef<string>;
    mergedTheme: import("vue").ComputedRef<{
        common: {
            baseColor: string;
            primaryColor: string;
            primaryColorHover: string;
            primaryColorPressed: string;
            primaryColorSuppl: string;
            infoColor: string;
            infoColorHover: string;
            infoColorPressed: string;
            infoColorSuppl: string;
            successColor: string;
            successColorHover: string;
            successColorPressed: string;
            successColorSuppl: string;
            warningColor: string;
            warningColorHover: string;
            warningColorPressed: string;
            warningColorSuppl: string;
            errorColor: string;
            errorColorHover: string;
            errorColorPressed: string;
            errorColorSuppl: string;
            textColorBase: string;
            textColor1: string;
            textColor2: string;
            textColor3: string;
            textColorDisabled: string;
            placeholderColor: string;
            placeholderColorDisabled: string;
            iconColor: string;
            iconColorHover: string;
            iconColorPressed: string;
            iconColorDisabled: string;
            opacity1: string;
            opacity2: string;
            opacity3: string;
            opacity4: string;
            opacity5: string;
            dividerColor: string;
            borderColor: string;
            closeIconColor: string;
            closeIconColorHover: string;
            closeIconColorPressed: string;
            closeColorHover: string;
            closeColorPressed: string;
            clearColor: string;
            clearColorHover: string;
            clearColorPressed: string;
            scrollbarColor: string;
            scrollbarColorHover: string;
            scrollbarWidth: string;
            scrollbarHeight: string;
            scrollbarBorderRadius: string;
            progressRailColor: string;
            railColor: string;
            popoverColor: string;
            tableColor: string;
            cardColor: string;
            modalColor: string;
            bodyColor: string;
            tagColor: string;
            avatarColor: string;
            invertedColor: string;
            inputColor: string;
            codeColor: string;
            tabColor: string;
            actionColor: string;
            tableHeaderColor: string;
            hoverColor: string;
            tableColorHover: string;
            tableColorStriped: string;
            pressedColor: string;
            opacityDisabled: string;
            inputColorDisabled: string;
            buttonColor2: string;
            buttonColor2Hover: string;
            buttonColor2Pressed: string;
            boxShadow1: string;
            boxShadow2: string;
            boxShadow3: string;
            fontFamily: string;
            fontFamilyMono: string;
            fontWeight: string;
            fontWeightStrong: string;
            cubicBezierEaseInOut: string;
            cubicBezierEaseOut: string;
            cubicBezierEaseIn: string;
            borderRadius: string;
            borderRadiusSmall: string;
            fontSize: string;
            fontSizeMini: string;
            fontSizeTiny: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            lineHeight: string;
            heightMini: string;
            heightTiny: string;
            heightSmall: string;
            heightMedium: string;
            heightLarge: string;
            heightHuge: string;
            name: "common";
        };
        self: {
            lineHeight: string;
            color: string;
            colorModal: string;
            colorPopover: string;
            colorTarget: string;
            colorEmbedded: string;
            colorEmbeddedModal: string;
            colorEmbeddedPopover: string;
            textColor: string;
            titleTextColor: string;
            borderColor: string;
            actionColor: string;
            titleFontWeight: string;
            closeColorHover: string;
            closeColorPressed: string;
            closeBorderRadius: string;
            closeIconColor: string;
            closeIconColorHover: string;
            closeIconColorPressed: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            boxShadow: string;
            borderRadius: string;
            paddingSmall: string;
            paddingMedium: string;
            paddingLarge: string;
            paddingHuge: string;
            titleFontSizeSmall: string;
            titleFontSizeMedium: string;
            titleFontSizeLarge: string;
            titleFontSizeHuge: string;
            closeIconSize: string;
            closeSize: string;
        };
        peers: any;
        peerOverrides: {
            [x: string]: any;
        };
    }>;
    handleCloseClick: () => void;
    cssVars: import("vue").ComputedRef<{
        '--n-bezier': string;
        '--n-border-radius': string;
        '--n-color': string;
        '--n-color-modal': string;
        '--n-color-popover': string;
        '--n-color-embedded': string;
        '--n-color-embedded-modal': string;
        '--n-color-embedded-popover': string;
        '--n-color-target': string;
        '--n-text-color': string;
        '--n-line-height': string;
        '--n-action-color': string;
        '--n-title-text-color': string;
        '--n-title-font-weight': string;
        '--n-close-icon-color': string;
        '--n-close-icon-color-hover': string;
        '--n-close-icon-color-pressed': string;
        '--n-close-color-hover': string;
        '--n-close-color-pressed': string;
        '--n-border-color': string;
        '--n-box-shadow': string;
        '--n-padding-top': string;
        '--n-padding-bottom': string;
        '--n-padding-left': string;
        '--n-font-size': string;
        '--n-title-font-size': string;
        '--n-close-size': string;
        '--n-close-icon-size': string;
        '--n-close-border-radius': string;
    }> | undefined;
    themeClass: import("vue").Ref<string> | undefined;
    onRender: (() => void) | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: StringConstructor;
    contentStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    headerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    headerExtraStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    footerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    embedded: BooleanConstructor;
    segmented: {
        readonly type: import("vue").PropType<boolean | import("naive-ui/es/card/src/Card").Segmented>;
        readonly default: false;
    };
    size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large" | "huge">;
        readonly default: "medium";
    };
    bordered: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    closable: {
        readonly type: BooleanConstructor;
        readonly default: boolean;
    };
    hoverable: BooleanConstructor;
    role: StringConstructor;
    onClose: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<() => void>>;
    theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>;
    themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>>;
    builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Card", {
        lineHeight: string;
        color: string;
        colorModal: string;
        colorPopover: string;
        colorTarget: string;
        colorEmbedded: string;
        colorEmbeddedModal: string;
        colorEmbeddedPopover: string;
        textColor: string;
        titleTextColor: string;
        borderColor: string;
        actionColor: string;
        titleFontWeight: string;
        closeColorHover: string;
        closeColorPressed: string;
        closeBorderRadius: string;
        closeIconColor: string;
        closeIconColorHover: string;
        closeIconColorPressed: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        boxShadow: string;
        borderRadius: string;
        paddingSmall: string;
        paddingMedium: string;
        paddingLarge: string;
        paddingHuge: string;
        titleFontSizeSmall: string;
        titleFontSizeMedium: string;
        titleFontSizeLarge: string;
        titleFontSizeHuge: string;
        closeIconSize: string;
        closeSize: string;
    }, any>>>;
}>>, {
    size: "small" | "medium" | "large" | "huge";
    bordered: boolean;
    closable: boolean;
    hoverable: boolean;
    embedded: boolean;
    segmented: boolean | import("naive-ui/es/card/src/Card").Segmented;
}>, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export default UCard;
