export type { MenuOption } from 'naive-ui';
declare const UMenu: import("vue").DefineComponent<{
    readonly options: {
        readonly type: import("vue").PropType<import("naive-ui/es/menu/src/interface").MenuMixedOption[]>;
        readonly default: () => never[];
    };
    readonly collapsed: {
        readonly type: import("vue").PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly collapsedWidth: {
        readonly type: NumberConstructor;
        readonly default: 48;
    };
    readonly iconSize: {
        readonly type: NumberConstructor;
        readonly default: 20;
    };
    readonly collapsedIconSize: {
        readonly type: NumberConstructor;
        readonly default: 24;
    };
    readonly rootIndent: NumberConstructor;
    readonly indent: {
        readonly type: NumberConstructor;
        readonly default: 32;
    };
    readonly labelField: {
        readonly type: StringConstructor;
        readonly default: "label";
    };
    readonly keyField: {
        readonly type: StringConstructor;
        readonly default: "key";
    };
    readonly childrenField: {
        readonly type: StringConstructor;
        readonly default: "children";
    };
    readonly disabledField: {
        readonly type: StringConstructor;
        readonly default: "disabled";
    };
    readonly defaultExpandAll: BooleanConstructor;
    readonly defaultExpandedKeys: import("vue").PropType<import("treemate").Key[]>;
    readonly expandedKeys: import("vue").PropType<import("treemate").Key[]>;
    readonly value: import("vue").PropType<import("treemate").Key | null>;
    readonly defaultValue: {
        readonly type: import("vue").PropType<import("treemate").Key | null>;
        readonly default: null;
    };
    readonly mode: {
        readonly type: import("vue").PropType<"vertical" | "horizontal">;
        readonly default: "vertical";
    };
    readonly watchProps: {
        readonly type: import("vue").PropType<("defaultValue" | "defaultExpandedKeys")[]>;
        readonly default: undefined;
    };
    readonly disabled: BooleanConstructor;
    readonly show: {
        readonly type: BooleanConstructor;
        readonly defalut: true;
    };
    readonly inverted: BooleanConstructor;
    readonly 'onUpdate:expandedKeys': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onUpdateExpandedKeys: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly expandIcon: import("vue").PropType<(option: import("naive-ui").MenuOption) => import("vue").VNodeChild>;
    readonly renderIcon: import("vue").PropType<(option: import("naive-ui").MenuOption) => import("vue").VNodeChild>;
    readonly renderLabel: import("vue").PropType<(option: import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption) => import("vue").VNodeChild>;
    readonly renderExtra: import("vue").PropType<(option: import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption) => import("vue").VNodeChild>;
    readonly dropdownProps: import("vue").PropType<import("naive-ui").DropdownProps>;
    readonly accordion: BooleanConstructor;
    readonly nodeProps: import("vue").PropType<import("naive-ui").MenuNodeProps>;
    readonly items: import("vue").PropType<(import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption)[]>;
    readonly onOpenNamesChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onSelect: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly onExpandedNamesChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly expandedNames: import("vue").PropType<import("treemate").Key[]>;
    readonly defaultExpandedNames: import("vue").PropType<import("treemate").Key[]>;
    readonly dropdownPlacement: {
        readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
        readonly default: "bottom";
    };
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>>;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    controlledExpandedKeys: import("vue").ComputedRef<import("treemate").Key[] | undefined>;
    uncontrolledExpanededKeys: import("vue").Ref<import("treemate").Key[]>;
    mergedExpandedKeys: import("vue").ComputedRef<import("treemate").Key[]>;
    uncontrolledValue: import("vue").Ref<import("treemate").Key | null>;
    mergedValue: import("vue").ComputedRef<import("treemate").Key | null>;
    activePath: import("vue").ComputedRef<import("treemate").Key[]>;
    tmNodes: import("vue").ComputedRef<import("treemate").TreeNode<import("naive-ui").MenuOption, import("naive-ui").MenuGroupOption, import("naive-ui/es/menu/src/interface").MenuIgnoredOption>[]>;
    mergedTheme: import("vue").ComputedRef<{
        common: {
            baseColor: string;
            primaryColor: string;
            primaryColorHover: string;
            primaryColorPressed: string;
            primaryColorSuppl: string;
            infoColor: string;
            infoColorHover: string;
            infoColorPressed: string;
            infoColorSuppl: string;
            successColor: string;
            successColorHover: string;
            successColorPressed: string;
            successColorSuppl: string;
            warningColor: string;
            warningColorHover: string;
            warningColorPressed: string;
            warningColorSuppl: string;
            errorColor: string;
            errorColorHover: string;
            errorColorPressed: string;
            errorColorSuppl: string;
            textColorBase: string;
            textColor1: string;
            textColor2: string;
            textColor3: string;
            textColorDisabled: string;
            placeholderColor: string;
            placeholderColorDisabled: string;
            iconColor: string;
            iconColorHover: string;
            iconColorPressed: string;
            iconColorDisabled: string;
            opacity1: string;
            opacity2: string;
            opacity3: string;
            opacity4: string;
            opacity5: string;
            dividerColor: string;
            borderColor: string;
            closeIconColor: string;
            closeIconColorHover: string;
            closeIconColorPressed: string;
            closeColorHover: string;
            closeColorPressed: string;
            clearColor: string;
            clearColorHover: string;
            clearColorPressed: string;
            scrollbarColor: string;
            scrollbarColorHover: string;
            scrollbarWidth: string;
            scrollbarHeight: string;
            scrollbarBorderRadius: string;
            progressRailColor: string;
            railColor: string;
            popoverColor: string;
            tableColor: string;
            cardColor: string;
            modalColor: string;
            bodyColor: string;
            tagColor: string;
            avatarColor: string;
            invertedColor: string;
            inputColor: string;
            codeColor: string;
            tabColor: string;
            actionColor: string;
            tableHeaderColor: string;
            hoverColor: string;
            tableColorHover: string;
            tableColorStriped: string;
            pressedColor: string;
            opacityDisabled: string;
            inputColorDisabled: string;
            buttonColor2: string;
            buttonColor2Hover: string;
            buttonColor2Pressed: string;
            boxShadow1: string;
            boxShadow2: string;
            boxShadow3: string;
            fontFamily: string;
            fontFamilyMono: string;
            fontWeight: string;
            fontWeightStrong: string;
            cubicBezierEaseInOut: string;
            cubicBezierEaseOut: string;
            cubicBezierEaseIn: string;
            borderRadius: string;
            borderRadiusSmall: string;
            fontSize: string;
            fontSizeMini: string;
            fontSizeTiny: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            lineHeight: string;
            heightMini: string;
            heightTiny: string;
            heightSmall: string;
            heightMedium: string;
            heightLarge: string;
            heightHuge: string;
            name: "common";
        };
        self: {
            itemColorHoverInverted: string;
            itemColorActiveInverted: string;
            itemColorActiveHoverInverted: string;
            itemColorActiveCollapsedInverted: string;
            itemTextColorInverted: string;
            itemTextColorHoverInverted: string;
            itemTextColorChildActiveInverted: string;
            itemTextColorChildActiveHoverInverted: string;
            itemTextColorActiveInverted: string;
            itemTextColorActiveHoverInverted: string;
            itemTextColorHorizontalInverted: string;
            itemTextColorHoverHorizontalInverted: string;
            itemTextColorChildActiveHorizontalInverted: string;
            itemTextColorChildActiveHoverHorizontalInverted: string;
            itemTextColorActiveHorizontalInverted: string;
            itemTextColorActiveHoverHorizontalInverted: string;
            itemIconColorInverted: string;
            itemIconColorHoverInverted: string;
            itemIconColorActiveInverted: string;
            itemIconColorActiveHoverInverted: string;
            itemIconColorChildActiveInverted: string;
            itemIconColorChildActiveHoverInverted: string;
            itemIconColorCollapsedInverted: string;
            itemIconColorHorizontalInverted: string;
            itemIconColorHoverHorizontalInverted: string;
            itemIconColorActiveHorizontalInverted: string;
            itemIconColorActiveHoverHorizontalInverted: string;
            itemIconColorChildActiveHorizontalInverted: string;
            itemIconColorChildActiveHoverHorizontalInverted: string;
            arrowColorInverted: string;
            arrowColorHoverInverted: string;
            arrowColorActiveInverted: string;
            arrowColorActiveHoverInverted: string;
            arrowColorChildActiveInverted: string;
            arrowColorChildActiveHoverInverted: string;
            groupTextColorInverted: string;
            borderRadius: string;
            color: string;
            groupTextColor: string;
            itemColorHover: string;
            itemColorActive: string;
            itemColorActiveHover: string;
            itemColorActiveCollapsed: string;
            itemTextColor: string;
            itemTextColorHover: string;
            itemTextColorActive: string;
            itemTextColorActiveHover: string;
            itemTextColorChildActive: string;
            itemTextColorChildActiveHover: string;
            itemTextColorHorizontal: string;
            itemTextColorHoverHorizontal: string;
            itemTextColorActiveHorizontal: string;
            itemTextColorActiveHoverHorizontal: string;
            itemTextColorChildActiveHorizontal: string;
            itemTextColorChildActiveHoverHorizontal: string;
            itemIconColor: string;
            itemIconColorHover: string;
            itemIconColorActive: string;
            itemIconColorActiveHover: string;
            itemIconColorChildActive: string;
            itemIconColorChildActiveHover: string;
            itemIconColorCollapsed: string;
            itemIconColorHorizontal: string;
            itemIconColorHoverHorizontal: string;
            itemIconColorActiveHorizontal: string;
            itemIconColorActiveHoverHorizontal: string;
            itemIconColorChildActiveHorizontal: string;
            itemIconColorChildActiveHoverHorizontal: string;
            itemHeight: string;
            arrowColor: string;
            arrowColorHover: string;
            arrowColorActive: string;
            arrowColorActiveHover: string;
            arrowColorChildActive: string;
            arrowColorChildActiveHover: string;
            colorInverted: string;
            borderColorHorizontal: string;
            fontSize: string;
            dividerColor: string;
        };
        peers: {
            Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
                borderRadius: string;
                boxShadow: string;
                color: string;
                textColor: string;
                padding: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                fontSizeHuge: string;
                optionTextColor: string;
                optionTextColorHover: string;
                optionTextColorActive: string;
                optionTextColorChildActive: string;
                color: string;
                dividerColor: string;
                suffixColor: string;
                prefixColor: string;
                optionColorHover: string;
                optionColorActive: string;
                groupHeaderTextColor: string;
                optionTextColorInverted: string;
                optionTextColorHoverInverted: string;
                optionTextColorActiveInverted: string;
                optionTextColorChildActiveInverted: string;
                colorInverted: string;
                dividerColorInverted: string;
                suffixColorInverted: string;
                prefixColorInverted: string;
                optionColorHoverInverted: string;
                optionColorActiveInverted: string;
                groupHeaderTextColorInverted: string;
                optionOpacityDisabled: string;
                padding: string;
                optionIconSizeSmall: string;
                optionIconSizeMedium: string;
                optionIconSizeLarge: string;
                optionIconSizeHuge: string;
                optionSuffixWidthSmall: string;
                optionSuffixWidthMedium: string;
                optionSuffixWidthLarge: string;
                optionSuffixWidthHuge: string;
                optionIconSuffixWidthSmall: string;
                optionIconSuffixWidthMedium: string;
                optionIconSuffixWidthLarge: string;
                optionIconSuffixWidthHuge: string;
                optionPrefixWidthSmall: string;
                optionPrefixWidthMedium: string;
                optionPrefixWidthLarge: string;
                optionPrefixWidthHuge: string;
                optionIconPrefixWidthSmall: string;
                optionIconPrefixWidthMedium: string;
                optionIconPrefixWidthLarge: string;
                optionIconPrefixWidthHuge: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
        };
        peerOverrides: {
            Tooltip?: {
                peers?: {
                    Popover?: import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Popover", {
                        fontSize: string;
                        borderRadius: string;
                        color: string;
                        dividerColor: string;
                        textColor: string;
                        boxShadow: string;
                        space: string;
                        spaceArrow: string;
                        arrowOffset: string;
                        arrowOffsetVertical: string;
                        arrowHeight: string;
                        padding: string;
                    }, any>> | undefined;
                } | undefined;
            } | undefined;
            Dropdown?: {
                peers?: {
                    Popover?: import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Popover", {
                        fontSize: string;
                        borderRadius: string;
                        color: string;
                        dividerColor: string;
                        textColor: string;
                        boxShadow: string;
                        space: string;
                        spaceArrow: string;
                        arrowOffset: string;
                        arrowOffsetVertical: string;
                        arrowHeight: string;
                        padding: string;
                    }, any>> | undefined;
                } | undefined;
            } | undefined;
        };
    }>;
    mergedCollapsed: import("vue").ComputedRef<boolean>;
    cssVars: import("vue").ComputedRef<any> | undefined;
    themeClass: import("vue").Ref<string> | undefined;
    onRender: (() => void) | undefined;
    showOption: (key?: import("naive-ui/es/menu/src/interface").Key | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly options: {
        readonly type: import("vue").PropType<import("naive-ui/es/menu/src/interface").MenuMixedOption[]>;
        readonly default: () => never[];
    };
    readonly collapsed: {
        readonly type: import("vue").PropType<boolean | undefined>;
        readonly default: undefined;
    };
    readonly collapsedWidth: {
        readonly type: NumberConstructor;
        readonly default: 48;
    };
    readonly iconSize: {
        readonly type: NumberConstructor;
        readonly default: 20;
    };
    readonly collapsedIconSize: {
        readonly type: NumberConstructor;
        readonly default: 24;
    };
    readonly rootIndent: NumberConstructor;
    readonly indent: {
        readonly type: NumberConstructor;
        readonly default: 32;
    };
    readonly labelField: {
        readonly type: StringConstructor;
        readonly default: "label";
    };
    readonly keyField: {
        readonly type: StringConstructor;
        readonly default: "key";
    };
    readonly childrenField: {
        readonly type: StringConstructor;
        readonly default: "children";
    };
    readonly disabledField: {
        readonly type: StringConstructor;
        readonly default: "disabled";
    };
    readonly defaultExpandAll: BooleanConstructor;
    readonly defaultExpandedKeys: import("vue").PropType<import("treemate").Key[]>;
    readonly expandedKeys: import("vue").PropType<import("treemate").Key[]>;
    readonly value: import("vue").PropType<import("treemate").Key | null>;
    readonly defaultValue: {
        readonly type: import("vue").PropType<import("treemate").Key | null>;
        readonly default: null;
    };
    readonly mode: {
        readonly type: import("vue").PropType<"vertical" | "horizontal">;
        readonly default: "vertical";
    };
    readonly watchProps: {
        readonly type: import("vue").PropType<("defaultValue" | "defaultExpandedKeys")[]>;
        readonly default: undefined;
    };
    readonly disabled: BooleanConstructor;
    readonly show: {
        readonly type: BooleanConstructor;
        readonly defalut: true;
    };
    readonly inverted: BooleanConstructor;
    readonly 'onUpdate:expandedKeys': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onUpdateExpandedKeys: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly expandIcon: import("vue").PropType<(option: import("naive-ui").MenuOption) => import("vue").VNodeChild>;
    readonly renderIcon: import("vue").PropType<(option: import("naive-ui").MenuOption) => import("vue").VNodeChild>;
    readonly renderLabel: import("vue").PropType<(option: import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption) => import("vue").VNodeChild>;
    readonly renderExtra: import("vue").PropType<(option: import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption) => import("vue").VNodeChild>;
    readonly dropdownProps: import("vue").PropType<import("naive-ui").DropdownProps>;
    readonly accordion: BooleanConstructor;
    readonly nodeProps: import("vue").PropType<import("naive-ui").MenuNodeProps>;
    readonly items: import("vue").PropType<(import("naive-ui").MenuOption | import("naive-ui").MenuGroupOption)[]>;
    readonly onOpenNamesChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly onSelect: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateValue>>;
    readonly onExpandedNamesChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/menu/src/interface").OnUpdateKeys>>;
    readonly expandedNames: import("vue").PropType<import("treemate").Key[]>;
    readonly defaultExpandedNames: import("vue").PropType<import("treemate").Key[]>;
    readonly dropdownPlacement: {
        readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
        readonly default: "bottom";
    };
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Menu", {
        itemColorHoverInverted: string;
        itemColorActiveInverted: string;
        itemColorActiveHoverInverted: string;
        itemColorActiveCollapsedInverted: string;
        itemTextColorInverted: string;
        itemTextColorHoverInverted: string;
        itemTextColorChildActiveInverted: string;
        itemTextColorChildActiveHoverInverted: string;
        itemTextColorActiveInverted: string;
        itemTextColorActiveHoverInverted: string;
        itemTextColorHorizontalInverted: string;
        itemTextColorHoverHorizontalInverted: string;
        itemTextColorChildActiveHorizontalInverted: string;
        itemTextColorChildActiveHoverHorizontalInverted: string;
        itemTextColorActiveHorizontalInverted: string;
        itemTextColorActiveHoverHorizontalInverted: string;
        itemIconColorInverted: string;
        itemIconColorHoverInverted: string;
        itemIconColorActiveInverted: string;
        itemIconColorActiveHoverInverted: string;
        itemIconColorChildActiveInverted: string;
        itemIconColorChildActiveHoverInverted: string;
        itemIconColorCollapsedInverted: string;
        itemIconColorHorizontalInverted: string;
        itemIconColorHoverHorizontalInverted: string;
        itemIconColorActiveHorizontalInverted: string;
        itemIconColorActiveHoverHorizontalInverted: string;
        itemIconColorChildActiveHorizontalInverted: string;
        itemIconColorChildActiveHoverHorizontalInverted: string;
        arrowColorInverted: string;
        arrowColorHoverInverted: string;
        arrowColorActiveInverted: string;
        arrowColorActiveHoverInverted: string;
        arrowColorChildActiveInverted: string;
        arrowColorChildActiveHoverInverted: string;
        groupTextColorInverted: string;
        borderRadius: string;
        color: string;
        groupTextColor: string;
        itemColorHover: string;
        itemColorActive: string;
        itemColorActiveHover: string;
        itemColorActiveCollapsed: string;
        itemTextColor: string;
        itemTextColorHover: string;
        itemTextColorActive: string;
        itemTextColorActiveHover: string;
        itemTextColorChildActive: string;
        itemTextColorChildActiveHover: string;
        itemTextColorHorizontal: string;
        itemTextColorHoverHorizontal: string;
        itemTextColorActiveHorizontal: string;
        itemTextColorActiveHoverHorizontal: string;
        itemTextColorChildActiveHorizontal: string;
        itemTextColorChildActiveHoverHorizontal: string;
        itemIconColor: string;
        itemIconColorHover: string;
        itemIconColorActive: string;
        itemIconColorActiveHover: string;
        itemIconColorChildActive: string;
        itemIconColorChildActiveHover: string;
        itemIconColorCollapsed: string;
        itemIconColorHorizontal: string;
        itemIconColorHoverHorizontal: string;
        itemIconColorActiveHorizontal: string;
        itemIconColorActiveHoverHorizontal: string;
        itemIconColorChildActiveHorizontal: string;
        itemIconColorChildActiveHoverHorizontal: string;
        itemHeight: string;
        arrowColor: string;
        arrowColorHover: string;
        arrowColorActive: string;
        arrowColorActiveHover: string;
        arrowColorChildActive: string;
        arrowColorChildActiveHover: string;
        colorInverted: string;
        borderColorHorizontal: string;
        fontSize: string;
        dividerColor: string;
    }, {
        Tooltip: import("naive-ui/es/_mixins").Theme<"Tooltip", {
            borderRadius: string;
            boxShadow: string;
            color: string;
            textColor: string;
            padding: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
        Dropdown: import("naive-ui/es/_mixins").Theme<"Dropdown", {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        }, {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        }>;
    }>>>;
}>>, {
    readonly mode: "vertical" | "horizontal";
    readonly show: boolean;
    readonly disabled: boolean;
    readonly options: import("naive-ui/es/menu/src/interface").MenuMixedOption[];
    readonly iconSize: number;
    readonly keyField: string;
    readonly labelField: string;
    readonly defaultValue: import("treemate").Key | null;
    readonly childrenField: string;
    readonly defaultExpandAll: boolean;
    readonly indent: number;
    readonly inverted: boolean;
    readonly disabledField: string;
    readonly accordion: boolean;
    readonly collapsed: boolean | undefined;
    readonly collapsedWidth: number;
    readonly collapsedIconSize: number;
    readonly watchProps: ("defaultValue" | "defaultExpandedKeys")[];
    readonly dropdownPlacement: import("naive-ui").PopoverPlacement;
}>;
export default UMenu;
