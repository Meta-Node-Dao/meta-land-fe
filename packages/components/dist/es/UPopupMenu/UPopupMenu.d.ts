import { DropdownProps } from 'naive-ui';
import './index.css';
export declare type UPopupPropsType = DropdownProps;
declare const UPopupMenu: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>>;
    readonly animated: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly keyboard: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large" | "huge">;
        readonly default: "medium";
    };
    readonly inverted: BooleanConstructor;
    readonly placement: {
        readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
        readonly default: "bottom";
    };
    readonly onSelect: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/dropdown/src/interface").OnUpdateValue>>;
    readonly options: {
        readonly type: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").DropdownMixedOption[]>;
        readonly default: () => never[];
    };
    readonly menuProps: import("vue").PropType<import("naive-ui").DropdownMenuProps>;
    readonly showArrow: BooleanConstructor;
    readonly renderLabel: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderLabel>;
    readonly renderIcon: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderIcon>;
    readonly renderOption: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderOption>;
    readonly nodeProps: import("vue").PropType<import("naive-ui").MenuNodeProps>;
    readonly labelField: {
        readonly type: StringConstructor;
        readonly default: "label";
    };
    readonly keyField: {
        readonly type: StringConstructor;
        readonly default: "key";
    };
    readonly childrenField: {
        readonly type: StringConstructor;
        readonly default: "children";
    };
    readonly value: import("vue").PropType<import("treemate").Key | null>;
    readonly show: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    readonly defaultShow: BooleanConstructor;
    readonly trigger: {
        type: import("vue").PropType<import("naive-ui").PopoverTrigger>;
        default: string;
    };
    readonly delay: {
        type: NumberConstructor;
        default: number;
    };
    readonly duration: {
        type: NumberConstructor;
        default: number;
    };
    readonly raw: BooleanConstructor;
    readonly x: NumberConstructor;
    readonly y: NumberConstructor;
    readonly arrowPointToCenter: BooleanConstructor;
    readonly disabled: BooleanConstructor;
    readonly getDisabled: import("vue").PropType<() => boolean>;
    readonly displayDirective: {
        type: import("vue").PropType<"show" | "if">;
        default: string;
    };
    readonly arrowStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly flip: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly width: {
        type: import("vue").PropType<number | "trigger">;
        default: undefined;
    };
    readonly overlap: BooleanConstructor;
    readonly keepAliveOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly zIndex: NumberConstructor;
    readonly to: {
        type: import("vue").PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    readonly scrollable: BooleanConstructor;
    readonly contentStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly headerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly footerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly onClickoutside: import("vue").PropType<(e: MouseEvent) => void>;
    readonly 'onUpdate:show': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
    readonly onUpdateShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
    readonly internalDeactivateImmediately: BooleanConstructor;
    readonly internalSyncTargetWithParent: BooleanConstructor;
    readonly internalInheritedEventHandlers: {
        type: import("vue").PropType<import("naive-ui/es/popover/src/Popover").TriggerEventHandlers[]>;
        default: () => never[];
    };
    readonly internalTrapFocus: BooleanConstructor;
    readonly internalExtraClass: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    readonly onShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void> | undefined>;
    readonly onHide: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void> | undefined>;
    readonly arrow: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    readonly minWidth: NumberConstructor;
    readonly maxWidth: NumberConstructor;
}, {
    mergedClsPrefix: import("vue").ComputedRef<string>;
    mergedTheme: import("vue").ComputedRef<{
        common: {
            baseColor: string;
            primaryColor: string;
            primaryColorHover: string;
            primaryColorPressed: string;
            primaryColorSuppl: string;
            infoColor: string;
            infoColorHover: string;
            infoColorPressed: string;
            infoColorSuppl: string;
            successColor: string;
            successColorHover: string;
            successColorPressed: string;
            successColorSuppl: string;
            warningColor: string;
            warningColorHover: string;
            warningColorPressed: string;
            warningColorSuppl: string;
            errorColor: string;
            errorColorHover: string;
            errorColorPressed: string;
            errorColorSuppl: string;
            textColorBase: string;
            textColor1: string;
            textColor2: string;
            textColor3: string;
            textColorDisabled: string;
            placeholderColor: string;
            placeholderColorDisabled: string;
            iconColor: string;
            iconColorHover: string;
            iconColorPressed: string;
            iconColorDisabled: string;
            opacity1: string;
            opacity2: string;
            opacity3: string;
            opacity4: string;
            opacity5: string;
            dividerColor: string;
            borderColor: string;
            closeIconColor: string;
            closeIconColorHover: string;
            closeIconColorPressed: string;
            closeColorHover: string;
            closeColorPressed: string;
            clearColor: string;
            clearColorHover: string;
            clearColorPressed: string;
            scrollbarColor: string;
            scrollbarColorHover: string;
            scrollbarWidth: string;
            scrollbarHeight: string;
            scrollbarBorderRadius: string;
            progressRailColor: string;
            railColor: string;
            popoverColor: string;
            tableColor: string;
            cardColor: string;
            modalColor: string;
            bodyColor: string;
            tagColor: string;
            avatarColor: string;
            invertedColor: string;
            inputColor: string;
            codeColor: string;
            tabColor: string;
            actionColor: string;
            tableHeaderColor: string;
            hoverColor: string;
            tableColorHover: string;
            tableColorStriped: string;
            pressedColor: string;
            opacityDisabled: string;
            inputColorDisabled: string;
            buttonColor2: string;
            buttonColor2Hover: string;
            buttonColor2Pressed: string;
            boxShadow1: string;
            boxShadow2: string;
            boxShadow3: string;
            fontFamily: string;
            fontFamilyMono: string;
            fontWeight: string;
            fontWeightStrong: string;
            cubicBezierEaseInOut: string;
            cubicBezierEaseOut: string;
            cubicBezierEaseIn: string;
            borderRadius: string;
            borderRadiusSmall: string;
            fontSize: string;
            fontSizeMini: string;
            fontSizeTiny: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            lineHeight: string;
            heightMini: string;
            heightTiny: string;
            heightSmall: string;
            heightMedium: string;
            heightLarge: string;
            heightHuge: string;
            name: "common";
        };
        self: {
            optionHeightSmall: string;
            optionHeightMedium: string;
            optionHeightLarge: string;
            optionHeightHuge: string;
            borderRadius: string;
            fontSizeSmall: string;
            fontSizeMedium: string;
            fontSizeLarge: string;
            fontSizeHuge: string;
            optionTextColor: string;
            optionTextColorHover: string;
            optionTextColorActive: string;
            optionTextColorChildActive: string;
            color: string;
            dividerColor: string;
            suffixColor: string;
            prefixColor: string;
            optionColorHover: string;
            optionColorActive: string;
            groupHeaderTextColor: string;
            optionTextColorInverted: string;
            optionTextColorHoverInverted: string;
            optionTextColorActiveInverted: string;
            optionTextColorChildActiveInverted: string;
            colorInverted: string;
            dividerColorInverted: string;
            suffixColorInverted: string;
            prefixColorInverted: string;
            optionColorHoverInverted: string;
            optionColorActiveInverted: string;
            groupHeaderTextColorInverted: string;
            optionOpacityDisabled: string;
            padding: string;
            optionIconSizeSmall: string;
            optionIconSizeMedium: string;
            optionIconSizeLarge: string;
            optionIconSizeHuge: string;
            optionSuffixWidthSmall: string;
            optionSuffixWidthMedium: string;
            optionSuffixWidthLarge: string;
            optionSuffixWidthHuge: string;
            optionIconSuffixWidthSmall: string;
            optionIconSuffixWidthMedium: string;
            optionIconSuffixWidthLarge: string;
            optionIconSuffixWidthHuge: string;
            optionPrefixWidthSmall: string;
            optionPrefixWidthMedium: string;
            optionPrefixWidthLarge: string;
            optionPrefixWidthHuge: string;
            optionIconPrefixWidthSmall: string;
            optionIconPrefixWidthMedium: string;
            optionIconPrefixWidthLarge: string;
            optionIconPrefixWidthHuge: string;
        };
        peers: {
            Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                fontSize: string;
                borderRadius: string;
                color: string;
                dividerColor: string;
                textColor: string;
                boxShadow: string;
                space: string;
                spaceArrow: string;
                arrowOffset: string;
                arrowOffsetVertical: string;
                arrowHeight: string;
                padding: string;
            }, any>;
        };
        peerOverrides: {
            Popover?: {
                peers?: {
                    [x: string]: any;
                } | undefined;
            } | undefined;
        };
    }>;
    tmNodes: import("vue").ComputedRef<import("treemate").TreeNode<import("naive-ui").MenuOption | import("naive-ui/es/menu/src/interface").MenuRenderOption, import("naive-ui").MenuGroupOption, import("naive-ui/es/menu/src/interface").MenuIgnoredOption>[]>;
    mergedShow: import("vue").ComputedRef<boolean>;
    handleAfterLeave: () => void;
    doUpdateShow: (value: boolean) => void;
    cssVars: import("vue").ComputedRef<any> | undefined;
    themeClass: import("vue").Ref<string> | undefined;
    onRender: (() => void) | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>;
    readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>>;
    readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Dropdown", {
        optionHeightSmall: string;
        optionHeightMedium: string;
        optionHeightLarge: string;
        optionHeightHuge: string;
        borderRadius: string;
        fontSizeSmall: string;
        fontSizeMedium: string;
        fontSizeLarge: string;
        fontSizeHuge: string;
        optionTextColor: string;
        optionTextColorHover: string;
        optionTextColorActive: string;
        optionTextColorChildActive: string;
        color: string;
        dividerColor: string;
        suffixColor: string;
        prefixColor: string;
        optionColorHover: string;
        optionColorActive: string;
        groupHeaderTextColor: string;
        optionTextColorInverted: string;
        optionTextColorHoverInverted: string;
        optionTextColorActiveInverted: string;
        optionTextColorChildActiveInverted: string;
        colorInverted: string;
        dividerColorInverted: string;
        suffixColorInverted: string;
        prefixColorInverted: string;
        optionColorHoverInverted: string;
        optionColorActiveInverted: string;
        groupHeaderTextColorInverted: string;
        optionOpacityDisabled: string;
        padding: string;
        optionIconSizeSmall: string;
        optionIconSizeMedium: string;
        optionIconSizeLarge: string;
        optionIconSizeHuge: string;
        optionSuffixWidthSmall: string;
        optionSuffixWidthMedium: string;
        optionSuffixWidthLarge: string;
        optionSuffixWidthHuge: string;
        optionIconSuffixWidthSmall: string;
        optionIconSuffixWidthMedium: string;
        optionIconSuffixWidthLarge: string;
        optionIconSuffixWidthHuge: string;
        optionPrefixWidthSmall: string;
        optionPrefixWidthMedium: string;
        optionPrefixWidthLarge: string;
        optionPrefixWidthHuge: string;
        optionIconPrefixWidthSmall: string;
        optionIconPrefixWidthMedium: string;
        optionIconPrefixWidthLarge: string;
        optionIconPrefixWidthHuge: string;
    }, {
        Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
            fontSize: string;
            borderRadius: string;
            color: string;
            dividerColor: string;
            textColor: string;
            boxShadow: string;
            space: string;
            spaceArrow: string;
            arrowOffset: string;
            arrowOffsetVertical: string;
            arrowHeight: string;
            padding: string;
        }, any>;
    }>>>;
    readonly animated: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly keyboard: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "large" | "huge">;
        readonly default: "medium";
    };
    readonly inverted: BooleanConstructor;
    readonly placement: {
        readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
        readonly default: "bottom";
    };
    readonly onSelect: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/dropdown/src/interface").OnUpdateValue>>;
    readonly options: {
        readonly type: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").DropdownMixedOption[]>;
        readonly default: () => never[];
    };
    readonly menuProps: import("vue").PropType<import("naive-ui").DropdownMenuProps>;
    readonly showArrow: BooleanConstructor;
    readonly renderLabel: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderLabel>;
    readonly renderIcon: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderIcon>;
    readonly renderOption: import("vue").PropType<import("naive-ui/es/dropdown/src/interface").RenderOption>;
    readonly nodeProps: import("vue").PropType<import("naive-ui").MenuNodeProps>;
    readonly labelField: {
        readonly type: StringConstructor;
        readonly default: "label";
    };
    readonly keyField: {
        readonly type: StringConstructor;
        readonly default: "key";
    };
    readonly childrenField: {
        readonly type: StringConstructor;
        readonly default: "children";
    };
    readonly value: import("vue").PropType<import("treemate").Key | null>;
    readonly show: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    readonly defaultShow: BooleanConstructor;
    readonly trigger: {
        type: import("vue").PropType<import("naive-ui").PopoverTrigger>;
        default: string;
    };
    readonly delay: {
        type: NumberConstructor;
        default: number;
    };
    readonly duration: {
        type: NumberConstructor;
        default: number;
    };
    readonly raw: BooleanConstructor;
    readonly x: NumberConstructor;
    readonly y: NumberConstructor;
    readonly arrowPointToCenter: BooleanConstructor;
    readonly disabled: BooleanConstructor;
    readonly getDisabled: import("vue").PropType<() => boolean>;
    readonly displayDirective: {
        type: import("vue").PropType<"show" | "if">;
        default: string;
    };
    readonly arrowStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly flip: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly width: {
        type: import("vue").PropType<number | "trigger">;
        default: undefined;
    };
    readonly overlap: BooleanConstructor;
    readonly keepAliveOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly zIndex: NumberConstructor;
    readonly to: {
        type: import("vue").PropType<string | boolean | HTMLElement>;
        default: undefined;
    };
    readonly scrollable: BooleanConstructor;
    readonly contentStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly headerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly footerStyle: import("vue").PropType<string | import("vue").CSSProperties>;
    readonly onClickoutside: import("vue").PropType<(e: MouseEvent) => void>;
    readonly 'onUpdate:show': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
    readonly onUpdateShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
    readonly internalDeactivateImmediately: BooleanConstructor;
    readonly internalSyncTargetWithParent: BooleanConstructor;
    readonly internalInheritedEventHandlers: {
        type: import("vue").PropType<import("naive-ui/es/popover/src/Popover").TriggerEventHandlers[]>;
        default: () => never[];
    };
    readonly internalTrapFocus: BooleanConstructor;
    readonly internalExtraClass: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    readonly onShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void> | undefined>;
    readonly onHide: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void> | undefined>;
    readonly arrow: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    readonly minWidth: NumberConstructor;
    readonly maxWidth: NumberConstructor;
}>>, {
    readonly size: "small" | "medium" | "large" | "huge";
    readonly show: boolean | undefined;
    readonly flip: boolean;
    readonly width: number | "trigger";
    readonly disabled: boolean;
    readonly duration: number;
    readonly to: string | boolean | HTMLElement;
    readonly options: import("naive-ui/es/dropdown/src/interface").DropdownMixedOption[];
    readonly raw: boolean;
    readonly placement: import("naive-ui").PopoverPlacement;
    readonly overlap: boolean;
    readonly keyField: string;
    readonly scrollable: boolean;
    readonly trigger: import("naive-ui").PopoverTrigger;
    readonly labelField: string;
    readonly showArrow: boolean;
    readonly delay: number;
    readonly arrowPointToCenter: boolean;
    readonly displayDirective: "show" | "if";
    readonly keepAliveOnHover: boolean;
    readonly internalDeactivateImmediately: boolean;
    readonly animated: boolean;
    readonly internalTrapFocus: boolean;
    readonly defaultShow: boolean;
    readonly internalSyncTargetWithParent: boolean;
    readonly internalInheritedEventHandlers: import("naive-ui/es/popover/src/Popover").TriggerEventHandlers[];
    readonly internalExtraClass: string[];
    readonly arrow: boolean | undefined;
    readonly childrenField: string;
    readonly keyboard: boolean;
    readonly inverted: boolean;
}>, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export default UPopupMenu;
